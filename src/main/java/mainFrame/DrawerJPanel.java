/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainFrame;

import java.awt.Color;

/**
 *
 * @author alexander
 */

import java.awt.Color;
import java.awt.Graphics;
import java.util.*;
import Slicer.*;

import java.awt.event.KeyEvent;

class Scaler {
    public static int highest(int[] arr) {
        int curHighest = arr[0];
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i] > curHighest) {
                curHighest = arr[i];
            }
        }
        return curHighest;
    }
    public static float highest(float[] arr) {
        float curHighest = arr[0];
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i] > curHighest) {
                curHighest = arr[i];
            }
        }
        return curHighest;
    }
    public static int lowest(int[] arr) {
        int curLowest = arr[0];
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i] < curLowest) {
                curLowest = arr[i];
            }
        }
        return curLowest;
    }
    public static float lowest(float[] arr) {
        float curLowest = arr[0];
        for (int i = 0; i < arr.length; ++i) {
            if (arr[i] < curLowest) {
                curLowest = arr[i];
            }
        }
        return curLowest;
    }
}

public class DrawerJPanel extends javax.swing.JPanel {
    
    ArrayList<Triangle> shape;
    //ArrayList<Vector3> polygon = new ArrayList<>();
    ArrayList<Polygon> polygons = new ArrayList<>();
    float layerHeight = (float)0.0;
    
    float shapeWidth = (float)0.0;
    float shapeHeight = (float)0.0;
    float xShapeOffset =(float)0.0;
    float yShapeOffset = (float)0.0;
    double lineWidth = 0.44;
    
    String prevFileName = "";
    String prevLayerHeight = "";
    
    /**
     * Creates new form DrawerJPanel
     */
    public DrawerJPanel() {
        initComponents();
    }   
    
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        float xOffset = (float)50.0+xShapeOffset;
        float yOffset = (float)65.0+yShapeOffset;
        
        float windWidth = (float)100.0;
        float windHeight = (float)100.0;
        
        float scale = (float)0.0;
        if (windWidth/shapeWidth > windHeight/shapeHeight) {
            scale = windHeight/shapeHeight;
        } else {
            scale = windWidth/shapeWidth;
        }
        
        
        if (polygons.size() == 0) {
            return;
        }
        
        for (int j = 0; j < polygons.size(); ++j) {
            float[] xCords = new float[polygons.get(j).getVertices().size()];
            float[] yCords = new float[polygons.get(j).getVertices().size()];
            for (int i = 0; i < polygons.get(j).getVertices().size(); ++i) {
                Vector2 point = polygons.get(j).getVertices().get(i);
                xCords[i] = (float)point.getX();
                yCords[i] = (float)point.getY();
            }

            int[] nxCords = new int[xCords.length];
            int[] nyCords = new int[yCords.length];
            
            for (int i = 0; i < polygons.get(j).getVertices().size(); ++i) {
                nxCords[i] = Math.round(xOffset+(xCords[i]+xShapeOffset)*scale);
                nyCords[i] = Math.round(yOffset+(yCords[i]+yShapeOffset)*scale);
            }

            g.setColor(new Color(0,0,0));
            g.drawPolygon(nxCords, nyCords, polygons.get(j).getVertices().size());
        }
    }   
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnKnapp = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txfFilNamn = new javax.swing.JTextField();
        txfLayerHeight = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        btnKnapp.setText("Visa");
        btnKnapp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKnappActionPerformed(evt);
            }
        });

        jLabel1.setText("Fil namn");

        txfFilNamn.setText("test.stl");
        txfFilNamn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfFilNamnActionPerformed(evt);
            }
        });

        txfLayerHeight.setText("0.28");
        txfLayerHeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txfLayerHeightActionPerformed(evt);
            }
        });
        txfLayerHeight.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txfLayerHeightKeyPressed(evt);
            }
        });

        jLabel2.setText("Lager HÃ¶jd");

        jButton1.setText("konvertera");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txfLayerHeight, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(txfFilNamn, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnKnapp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnKnapp)
                    .addComponent(jLabel1)
                    .addComponent(txfFilNamn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txfLayerHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)))
                .addGap(0, 105, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
        
    private void btnKnappActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKnappActionPerformed
        layerHeight = Float.parseFloat(txfLayerHeight.getText());
        
        polygons = new ArrayList<Polygon>();
        
        try {
            ArrayList<Triangle> triangles = STLReader.readSTL(txfFilNamn.getText());
            
            ArrayList<Vector2> v = new ArrayList<>();
            v.add(new Vector2(2.0, 1.0));
            v.add(new Vector2(0.0, 1.0));
            Polygon pol = new Polygon(v);
            System.out.println(pol.toString());
            System.out.println(pol.reverse().toString());
            
            float[] xCords = new float[triangles.size()*3];
            float[] yCords = new float[triangles.size()*3];
            float[] zCords = new float[triangles.size()*3];
            for (int i = 0; i < triangles.size(); ++i) {
                for (int j = 0; j < 3; ++j) {
                    xCords[i*3+j]=(float)triangles.get(i).getV(j).getX();
                    yCords[i*3+j]=(float)triangles.get(i).getV(j).getY();
                    zCords[i*3+j]=(float)triangles.get(i).getV(j).getZ();
                }
            }
            float xLowest = Scaler.lowest(xCords);
            float yLowest = Scaler.lowest(yCords);
            float zLowest = Scaler.lowest(zCords);
            float xHighest = Scaler.highest(xCords);
            float yHighest = Scaler.highest(yCords);
            float zHighest = Scaler.highest(zCords);
            shapeWidth = xHighest-xLowest;
            shapeHeight = yHighest-yLowest;
            xShapeOffset = -xLowest;
            yShapeOffset = -yLowest;
            double height = zHighest-zLowest;
            System.out.println(xLowest+", "+xHighest+", "+xShapeOffset);
            
            GCodeWriter w = new GCodeWriter(layerHeight, lineWidth, 1.75, 1200, 220, 220, 0.0);
            {   
            Slicer s = new Slicer(triangles);
            ArrayList<ArrayList<Vector3>> intersection = s.sliceLayer(layerHeight);
            for (int i = 0; i < intersection.size(); ++i) {
                for (int j = 0; j < intersection.get(i).size(); ++j) {
                    //System.out.print(intersection.get(i).get(j).toString()+", ");
                }
                //System.out.println();
            }
            System.out.println(intersection.size());
            
            ArrayList<Polygon> new_polygons = s.connectEdges(intersection, 0.0001);
            
            for (Polygon p: new_polygons) {
                Polygon polygon = p.clean(0.0001);
                polygons.add(polygon);
                Polygon inner = polygon.innerPolygon(lineWidth/2.0).fixLoops().removeSharpTurns(Math.PI-0.1);
                polygons.add(inner);
                
                //System.out.println(inner.toString());
                //polygons.add(inner.innerPolygon(lineWidth/2.0));
                
                //Polygon inner_inner = inner.innerPolygon(lineWidth/2.0).fixLoops().removeSharpTurns(Math.PI-0.1);
                
                //System.out.println(inner_inner.toString());
                
                //polygons.add(wierdP);
                //polygons.add(wierdP.innerPolygon(lineWidth/2.0));
                //polygons.add(polygon.innerPolygon(lineWidth));
                
                /*polygons.add(polygon);
                
                for (Polygon poly: w.fill(inner_inner,0.0)) {
                    System.out.println(poly.reverse());
                }
                polygons.addAll(w.fill(inner_inner, 0.0));
                */
            }
            
            }
            /*for (Vector2 vec : polygons.get(1).getVertices()) {
                System.out.println(vec.toString());
            }*/
            
            
            //loat layerHeight = 0.28f;
            
            {
            Slicer s = new Slicer(triangles);
            
            long timeSlicing = 0;
            long totalTimeStart = System.nanoTime();
            for (float curHeight = zLowest+layerHeight; curHeight <= zHighest; curHeight += layerHeight) {
                long start = System.nanoTime();
                ArrayList<ArrayList<Vector3>> intersection = s.sliceLayer(curHeight);
                long stop = System.nanoTime();
                timeSlicing += stop-start;
                System.out.println(stop-start);
                
                ArrayList<Polygon> newPolygons = s.connectEdges(intersection, 0.001);
                ArrayList<Polygon> cleanedPolygons = new ArrayList<>();
                for (Polygon p : newPolygons) {
                    cleanedPolygons.add(p.clean(0.0001));
                }
                //System.out.println("size()="+cleanedPolygons.size());
                w.addLayer(cleanedPolygons);
            }
            
            w.build("out.gcode");
            
            //double nano = 1000000000.0;
            
            //System.out.println("time spent slicing="+timeSlicing/nano);
            //System.out.println("total time="+(System.nanoTime()-totalTimeStart)/nano);
            }
            repaint();
        } catch (java.nio.file.NoSuchFileException e) {
            System.out.println("Det finns ingen sÃ¥dan fil");
        }
    }//GEN-LAST:event_btnKnappActionPerformed

    private void txfLayerHeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfLayerHeightActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfLayerHeightActionPerformed

    private void txfLayerHeightKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txfLayerHeightKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txfLayerHeightKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        System.out.println("form "+evt.VK_B);
        if ((48 <= evt.VK_A && evt.VK_A <= 57) || evt.VK_A == 46) {
            prevLayerHeight = txfLayerHeight.getText();
        }   
        
    }//GEN-LAST:event_formKeyPressed

    private void txfFilNamnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txfFilNamnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txfFilNamnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnKnapp;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField txfFilNamn;
    private javax.swing.JTextField txfLayerHeight;
    // End of variables declaration//GEN-END:variables
}
